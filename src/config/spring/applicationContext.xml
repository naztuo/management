<?xml version="1.0" encoding="UTF-8"?>
<!-- schema方式引入约束，先找到文件 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	<!-- 开启自动扫描注解,在此只扫描控制层 -->
	<context:component-scan
			base-package="com.dcc"></context:component-scan>

	<!--使用mvc:annotation-driven可以不用配置映射器和适配器 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	<!-- 开启@AspectJ AOP代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />


	<!-- 放行静态资源 ,因为前端控制器会把静态资源也拦截掉-->
	<mvc:resources location="/html/" mapping="/html/*.html" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/font/" mapping="/font/**" />
	<mvc:resources location="/img/" mapping="/img/**" />
	<mvc:resources location="/" mapping="*.html" />


	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径，表示全局，如果写路径，则表示指定某个方法拦截 -->
			<!-- <mvc:mapping path="/**"/> -->
			<mvc:mapping path="/**" />
			<bean class="com.dcc.interceptors.InterceptorCustom"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>

	<!-- 配置VelocityConfigurer，负责在spring中设置Velocity引擎。通过属性resourceLoaderPath告诉Velocity到哪里寻找它的模板。
    通常将模板放到WEB-INF下的某个子目录下，可以保证这些模板不能被直接访问。-->
	<!--规定模板文件的类型和位置-->
	<bean id="velocityConfig"
		  class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/"/>
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">utf-8</prop>
				<prop key="output.encoding">utf-8</prop>
			</props>
		</property>
	</bean>

	<!--Velocity视图解析器-->
	<!--配置附加工具，以及将后缀为vm的文件交给下面的Resolver处理-->
	<bean id="velocityViewResolver"
		  class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="cache" value="false"/>
		<property name="prefix" value=""/>
		<property name="suffix" value=".vm"/>
		<property name="contentType" value="text/html;charset=utf-8"/>
		<property name="toolboxConfigLocation" value="/WEB-INF/views/toolbox.xml"/>
		<property name="exposeSpringMacroHelpers" value="true"/>
		<property name="exposeRequestAttributes" value="true"/>
		<property name="exposeSessionAttributes" value="true"/>
		<property name="allowSessionOverride" value="true"/>
		<property name="allowRequestOverride" value="true"/>
		<property name="order" value="0"/>
	</bean>
</beans>